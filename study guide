1. Configuring vm:
Name: joaoalme
Machinefolder: /nfs/homes/joaoalme/sgoinfre
Type: Linux
Version: Debian (64-bit)
Memory size: 1024 MB
Create a virtual disk now >> next
VDI >> next
Dynamically allocated >> next
30.8 GB >> next
Select optical drive >> Debian Image in your machine
Start VM

2. Installing Linux:
Select all standard languages
Hostname: joaoalme42
Domain name:
Full name: joaoalme
New user name: joaoalme

3. Partioning disk
partioning method: Manual
Select your disk (33.1 GB ATA VBOX HARDDISK in my case)
Create new empty partition table on this device: Yes

Select FREE SPACE
Create a new partition
New patition size: 500M
Type: primary
Location: beginning
Use as: ext4
Mount point: boot
Bootable flag: on
Done setting up the partition

Configure encrypted volumes
Write changes to disk? yes
create encrypted volumes
Select /dev/sda5 (32568MB) >> with space bar
Really erase the data? Yes - You can cancel for this project
Encryption passphrase: 

Select FREE SPACE
Create a new partition
New patition size: MAX
Type: logical
Use as: ext4
Mount point: do not mount
Bootable flag: off
Done setting up the partition

Configure the logical volume manager:
Write changes to disk? yes
Create volume groups
Define group name: LVMGroup
Devices for the new volume group: /dev/mapper/sda5_crypt

New patition size: 10G
Mount point: root

New patition size: 5G
Mount point: /home

New patition size: 3G
Mount point: /var

New patition size: 3G
Mount point: /srv

New patition size: 3G
Mount point: /tmp

New patition size: 4G
Mount point: define manually >> /var/log

Scan extra media: NO
Select country: Portugal
Select mirror: Debian.org
Unselect all software to install
Install grub boot loader to your primary drive? Yes
Select device



Configuring paritions:
Hostname: joaoalme42
username: joaoalme

Check information about your devices

lsblk - list block devices - Prints all block devices (except RAM disks) in a tree-like
       format by default
      
4 - First config steps:
Logint as root user:
	su -

Install sudo:
	apt install sudo	

Add my user to sudo group:
	usermod -aG sudo joaoalme
	-a = append
	-G = groups
	Append the group the user groups list

Edit the sudoers file to give the user all privileges
	add under '# User privilege specification' 
	joaoalme ALL=(ALL) ALL

Intall essencial programs - VIM and Git
	apt-get install git 
	apt-get install vim
	
5 - Intall OpenSSH and configure
https://www.cyberciti.biz/faq/ubuntu-linux-install-openssh-server/
	sudo apt install openssh-server
	sudo vim /etc/ssh/sshd_config
	Find the line '#Port', uncoment it and add 4242 - (Port 4242)
	Save and exit
	sudo service ssh restart
	To check if its done type sudo grep Port /etc/ssh/sshd_config

6- Install UFW and configure
https://www.linux.com/training-tutorials/introduction-uncomplicated-firewall-ufw/
https://www.cyberciti.biz/faq/ufw-allow-incoming-ssh-connections-from-a-specific-ip-address-subnet-on-ubuntu-debian/
	apt-get install ufw
	sudo ufw enable
	sudo ufw allow ssh
	sudo ufw allow 4242
	To check if its all done use:
	sudo ufw status numbered
	If there are other open ports than 4242, close them:
	sudo ufw deny 'port_number'
	
7 - Configure SSH connection:
	In Virtual Box (GUI interface) > Settings > Network > Adapter 1 > Attached to: 
	Change from 'NAT' to 'Bridged Adapter'.
	Restart ssh: 
	sudo systemctl restart ssh
	Get your ip:
	ip a | grep inet | grep 'global dynamic' | cut -d'/' -f1 | awk '{ print $2 }'
	Set the remote acess trough ssh port 4242:
	sudo ssh your_username@0.0.0.0 -p 4242 >> sudo ssh joaoalme@192.168.1.81 -p 4242
	Now in the host machine (42 PC):
	ssh username@your_ip -p 4242 >> ssh joaoalme@192.168.1.81 -p 4242
	enter the password(s)
	
8 - Set up a strong password policy:
https://www.linuxtechi.com/enforce-password-policies-linux-ubuntu-centos/
	Install  the libpam-pwquality package:
	sudo apt-get install libpam-pwquality
	sudo vim /etc/pam.d/common-password
	locate the line that defines password requisite and after pam_pwquality.so type:
	retry=3 minlen=10 ucredit=-1 lcredit=-1 dcredit=-1 maxrepeat=3 reject_username difok=7 enforce_for_root
	Save and exit	
	Edit the 'Configuration control definitions for the login package' file:
	sudo vim /etc/login.defs
	Edit following lines:
	PASS_MAX_DAYS 9999	 
	PASS_MIN_DAYS 0 
	PASS_WARN_AGE 7
	to 
	PASS_MAX_DAYS 30	 
	PASS_MIN_DAYS 2 
	PASS_WARN_AGE 7

9 - Configure Sudoers Group and sudo log file
	https://medium.com/kernel-space/linux-fundamentals-a-to-z-of-a-sudoers-file-a5da99a30e7f
	cd /etc
	sudo visudo 
	Defaults	env_reset
	Defaults	mail_badpass
	Paths that can be used by sudo:
	Defaults	secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"
	Custom message to be displayed if an error due to a wrong password:
	Defaults	badpass_message="Password is wrong, please try again!"
	Authentication using sudo limited to 3 attempts:
	Defaults	passwd_tries=3
	The path of the log file of all sudo actions:
	Defaults	logfile="/var/log/sudo.log"
	Define to archive log inputs and outputs:
	Defaults	log_input, log_output
	Enable tty:
	Defaults	requiretty
	Save and exit
	Configure sudo log file	
	cd /var/log
	mkdir sudo
	touch sudo.log
	
10 - Managing users and groups:
	Create a group called 'user42':
	sudo groupadd user42
	Assign my user to group:
	sudo usermod -aG user42 joaoalme
	
	*Usefull information in user management:
	/etc/passwd file: contain information about all users:
		username:password:UID:GID:comment:home:shell
	/etc/shadow file: contain information about passwords
		username:password:last password change:min:max:warning:inactive:expired
	commands:
		sudo useradd 'user_name' - Create an user account.
		sudo passwd 'user_name' - Change password for an user
		sudo passwd -S 'user_name' - Check status of an account
		sudo passwd -l 'user_name' - Change password for an user
		sudo userdel -r 'user_name' - remove the user account and the home directory
		sudo chage -l username - Verify password expire info for new user
	*Usefull information in user management:
	/etc/group file:  contains group account information
		 groupname:password:GID:group members
	commands: 
		sudo groupadd 'group_name'- creates a group
		sudo groupmod -g - change GID
		sudo groupmod -n 'old_group_name' 'new_group_name- change the groupname 
		sudo groupdel 'group_name' - deletes a group
	*Usefull commands in managing users in groups:
		usermod - add a user to a group, change a user shell, login name, home directory, and more
		sudo usermod -aG 'group' 'user' >> add an user to a group
		sudo usermod -g 'group' 'user' >> change primary group of an user
		sudo usermod -c 'group' 'user' >> change the comment 
		sudo usermod -d '/homedir' 'user' >> change the home directory of an user.
		sudo usermod -s '/usr/bin/zsh' 'user' >> change the shell of an user (to zshel in this case)
		sudo usermod -l 'old_user_name' 'new_user_name' >> Change the user name.
	
10 - Shell Script

Your script must always be able to display the following information:
• The architecture of your operating system and its kernel version.
	uname -a get the architecture (-a stands for all)
• The number of physical processors.
	/proc/cpuinfo has the hardware info
	grep "physical id" /proc/cpuinfo | sort | uniq | wc -l
• The number of virtual processors.
	grep "^processor" /proc/cpuinfo | wc -l
• The current available RAM on your server and its utilization rate as a percentage.
	ram -m >> show the free RAM available and SWAP if available
	grep Mem and print 4th field with awk '{print $2}' >> free -m | grep Mem | awk '{print $2}'
	to get thw usage divide the free by used memory using fields and AWK >>
	free -m | grep Mem | awk '{printf("%.2f"), $3/$2*100}'
• The current available memory on your server and its utilization rate as a percentage.
	To see the server space >> df 
	to show it in MB >> flag -m. To show in GB, 2 flags, -B (block size) -g (makes the size in GB).
	Our server it's the lines that start with /dev/ >> grep '^/dev/', the ^ means the beggining of the line
	Take off the line with boot we can use grep -v '/boot$' (-v flag, deselect the line, $ flag select the end
	of the line) combined they take out the line that ends with.
	We need the sum of the 3 lineso. In the variable (fdisk) we add the lines of the same column:
	awk '{fdisk += $4} and END {print fdisk}.
	df -Bm | grep '^/dev/' | grep -v '/boot$' | awk '{fdisk += $4} END {print fdisk}'
• The current utilization rate of your processors as a percentage.
	top -bn1 >> -b starts top in batch(discontinuous) mode and -n1 indacates to produce one iteration
	grep '^%Cpu' >> takes the line that starts with '%Cpu'
	awk '{printf("%.1f%%"), $2}' >> takes the 2nd field and prints it with 1 decimal place and one percent
	top -bn1 | grep '^%Cpu' | awk '{printf("%.1f%%"), $2}'
• The date and time of the last reboot.
	who - b >> prints out information about users who are currently loggend in. -b show the time of last reboot
	awk '{print $3 " " $4}' >> takes 3rd and 4th columns and add aa space between them
	who -b | awk '{print $3 " " $4}'
• Whether LVM is active or not.
	lsblk >> show the partitions. 
	grep 'lvm'
	with awk check if there's a column 1. If yse print "LVM is active"
	lsblk | grep 'lvm' | awk '{if ($1) {print "LVM is active";exit;} else {print "no"}}'
• The number of active connections.
	ss -t >> displays network socket related info. -t stands for TCP
	grep ESTAB >> get the actives
	wc -l >> to count it
	ss -t | grep ESTAB | wc -l	
• The number of users using the server.
	who >> show users connected
	cut -d " " -f1 >> Use delimiter (" ") for field separation instead of tab and teke the first field
	sort -u >> uniq
	wc -l >> count
	who | cut -d " " -f 1 | sort -u | wc -l	
• The IPv4 address of your server and its MAC (Media Access Control) address.
	hostname -I  >> Displays all network addresses of the host
	ip link show >> shows the network device
	grep ether | awk '{print $2}'>> take the line with ether and print field 2
	ip link show | grep ether | awk '{print $2}'
• The number of commands executed with the sudo program.
	sudo apt install net-tools >> in order to use journalctl
	Now we have access to the command journalctl may be used to query the contents of the systemd(1) journal as
	written by systemd-journald.service(8), lets add _COMM to match for the script name (sudo)is added to the
	query. Lets grab just the commands thats what we want grep COMMAND, and lets cound the number of lines wc -l.
	journalctl _COMM=sudo | grep COMMAND | wc -l

Create a Shell script in:
sudo vim /usr/local/bin/monitoring.sh
change permissions to 777:
chmod 777 monitoring.sh
sudo visudo >> add rule in sudoers file
under:
#Allow members of group sudo to execute any command"
joaoalme ALL=(ALL) NOPASSWD: /usr/local/bin/monitoring.sh
sudo crontab -e >> set time of executions of the script
Add following line at the end of the file:
*/10 * * * * bash /root/monitoring.sh


#!/bin/bash

arch=$(uname -a)
phyproc=$(grep "physical id" /proc/cpuinfo | sort | uniq | wc -l)
virtproc=$(grep "^processor" /proc/cpuinfo | wc -l)
ram_free=$(free -m | grep Mem | awk '{print $4}')
ram_total=$(free -m | grep Mem | awk '{print $2}')
ram_usage_percent=$(free -m | grep Mem | awk '{printf("%.2f"), $3/$2*100}')
free_disk=$(df -Bm | grep '^/dev/' | grep -v '/boot$' | awk '{fdisk += $4} END {print fdisk}')
total_disk=$(df -Bg | grep '^/dev/' | grep -v '/boot$' | awk '{tdisk += $2} END {print tdisk}')
disk_usage_percent=$(df -Bm | grep '^/dev/' | grep -v '/boot$' | awk '{fdisk += $3} {tdisk += $2} END {printf("%.2f"), fdisk/tdisk*100}')
proc_usage_percent=$(top -bn1 | grep '^%Cpu' | awk '{printf("%.1f%%"), $2}')
last_boot=$(who -b | awk '{print $3 " " $4}')
lvm_active=$(lsblk | grep 'lvm' | awk '{if ($1) {printf "\033[0;32mYes\033[0m";exit} else {print "\033[0;031mNo\033[0m";exit;}}')
n_active_connect=$(ss -t | grep ESTAB | wc -l)
n_users_server=$(who | cut -d " " -f 1 | sort -u | wc -l)
ipv4=$(hostname -I)
mac=$(ip link show | grep ether | awk '{print $2}')
n_commands_sudo=$(journalctl _COMM=sudo | grep COMMAND | wc -l)

wall "  #Architecture: $arch
        #CPU physical: $phyproc
        #vCPU: $virtproc
        #Memory Free: ${ram_free}MB/${ram_total}MB ($ram_usage_percent%)
        #Disk Free: ${free_disk}MB/${total_disk}GB ($disk_usage_percent%)
        #CPU load: $proc_usage_percent
        #Last boot: $last_boot
        #LVM use: $lvm_active
        #Connections TCP: $n_active_connect ESTABLISHED
        #User log: $n_users_server
        #Network: IP $ipv4 ($mac)
        #Sudo: $n_commands_sudo cmd"



# systemctl command:
https://www.redhat.com/sysadmin/linux-systemctl-manage-services\

*** BONUS ***

1. PHP - (recursive acronym for PHP: Hypertext Preprocessor) is a widely-used open source general-purpose scripting language that is especially suited for web development and can be embedded into HTML.
PHP's development is focused on server-side scripting. The code is executed on the server, generating HTML which is then sent to the client.
1.1 - 	Download and update
	$ sudo apt update
	$ sudo apt install curl
	$ sudo curl -sSL https://packages.sury.org/php/README.txt | sudo bash -x
	$ sudo apt update 
1.2 -	Install
	$ sudo apt install php8.1
	$ sudo apt install php-common php-cgi php-cli php-mysql
1.3 -	Check version
	$ php -v


2. LIGHTTPD - (pronounced /lighty/) is a secure, fast, compliant, and very flexible web server that has been optimized for high-performance environments. lighttpd uses memory and CPU efficiently and has lower resource use than other popular web servers.
A web server is a computer system that processes requests via the internet or an intranet. Web servers are designed to store, 
process, and send information over the World Wide Web using Hypertext Transfer Protocol (HTTP).
A web server is a computer system with application software that delivers website content to the user. Accept requests from 
clients (web browsers) and respond by serving the appropriate files. 

2.1 -	Uninstall Apache to avoid conflict. It may be present due to PHP.
	$ systemctl status apache2
	$ sudo apt purge apache2
2.2 -	Install lighttp
	$ sudo apt install lighttpd
2.3 -	Start and enable lighttpd:
	$ sudo systemctl start lighttpd
	$ sudo systemctl enable lighttpd
	$ sudo systemctl status lighttpd
2.4 -	Allow http port in UFW: port 80 is assigned to commonly used internet communication protocol, Hypertext Transfer Protocol (HTTP).
	$ sudo ufw allow 80
	$ sudo ufw status
2.5 -	Activate lighttpd FastCGI module:
	$ sudo lighty-enable-mod fastcgi
	$ sudo lighty-enable-mod fastcgi-php
	$ sudo service lighttpd force-reload

3. MARIADB - MariaDB Server is one of the most popular database servers in the world. It turns data into structured information 
in a wide array of applications, ranging from banking to websites. 
3.1 -	Isntall and enable:
	$ sudo apt install mariadb-server
	sudo systemctl start mariadb
	$ sudo systemctl enable mariadb
3.2 -	Remove insecure default settings:
	$ sudo mysql_secure_installation
	Enter current password for root (enter for none): #Just press Enter (do not confuse database root with system root)
	Set root password? [Y/n] n
	Remove anonymous users? [Y/n] Y
	Disallow root login remotely? [Y/n] Y
	Remove test database and access to it? [Y/n] Y
	Reload privilege tables now? [Y/n] Y
3.2.1 - Restart MariaDB:
	$ sudo systemctl restart mariadb
3.3 -	Log into MariaDB:
	$ sudo mariadb
	MariaDB [(none)]>
3.3.1 -	Create new database: 
	MariaDB [(none)]> CREATE DATABASE <database-name>;
3.3.2 -	Create user:
	MariaDB [(none)]> CREATE USER 'admin'@'localhost' IDENTIFIED BY 'WPpassw0rd';
3.3.3 -	Create new database user and grant them full privileges on the newly-created database:
	MariaDB [(none)]> GRANT ALL ON wordpress_db.* TO 'admin'@'localhost' IDENTIFIED BY 'WPpassw0rd' WITH GRANT OPTION;
	MariaDB [(none)]> FLUSH PRIVILEGES;
	MariaDB [(none)]> exit
3.3.4 - Verify whether database user was successfully created by logging in to the MariaDB console 
	$ mysql -u root -p
	
4. WordPress - WordPress (WP or WordPress.org) is a free and open-source content management system (CMS) written in
hypertext preprocessor language[4] and paired with a MySQL or MariaDB database with supported HTTPS.
To function, WordPress has to be installed on a web server, either part of an Internet hosting service like WordPress.com
or a computer running the software package WordPress.org in order to serve as a network host in its own right.[10] A local
computer may be used for single-user testing and learning purposes.
4.1 -	Getting tools to install WordPress:
	$ sudo apt install wget
	$ sudo apt install tar
4.2 -	Download and install:
	$ wget http://wordpress.org/latest.tar.gz
	$ tar -xzvf latest.tar.gz
	$ sudo mv wordpress/* /var/www/html/
	$ rm -rf latest.tar.gz wordpress/
4.3 -	Create a WordPress congig file:
	$ sudo mv /var/www/html/wp-config-sample.php /var/www/html/wp-config.php
4.4 -	Configure data base info:
	$ sudo vi /var/www/html/wp-config.php
4.5 -	Fill following lines:
	23 defiip ne( 'DB_NAME', '<database-name>' );^M
	26 define( 'DB_USER', '<username-2>' );^M
	29 define( 'DB_PASSWORD', '<password-2>' );^M

5. Extra Service Fail2ban - Fail2ban scans log files (e.g. /var/log/apache/error_log) and bans IPs that show the malicious 
signs -- too many password failures, seeking for exploits, etc.
5.1 -	Intall:
	$ sudo apt install fail2ban
	$ sudo systemctl start fail2ban
	$ sudo systemctl enable fail2ban
	$ sudo systemctl status fail2ban
5.2 -	Create a config file: 
	$ sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
5.3 -	Edit config file - Line ~279 - SSH servers
	[sshd]

	# To use more aggressive sshd modes set filter parameter "mode" in jail.local:
	# normal (default), ddos, extra or aggressive (combines all).
	# See "tests/files/logs/sshd" or "filter.d/sshd.conf" for usage example and details.
	# mode   = normal
	enabled  = true
	maxretry = 3
	findtime = 10m
	bantime  = 1d
	port     = 4242
	logpath  = %(sshd_log)s
	backend  = %(sshd_backend)s
5.4 -	restart service
	$ sudo systemctl restart fail2ban
5.5 -	Check failed connections and banned ip adresses
	$ sudo fail2ban-client status
	$ sudo fail2ban-client status sshd
	$ sudo tail -f /var/log/fail2ban.log	
	PS: Test by setting a low value bantime (like 10m) in /etc/fail2ban/jail.local sshd settings, and try to connect 
	multiple times via SSH with the wrong password to get banned.
	
	
	
	
	
